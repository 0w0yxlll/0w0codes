#0w0 codes poj百练 
1002 方便记忆的电话号码
总时间限制: 2000ms 内存限制: 65536kB
【描述】
英文字母（除Q和Z外）和电话号码存在着对应关系，如下所示：
A,B,C -> 2
D,E,F -> 3
G,H,I -> 4
J,K,L -> 5
M,N,O -> 6
P,R,S -> 7
T,U,V -> 8
W,X,Y -> 9
标准的电话号码格式是xxx-xxxx，其中x表示0-9中的一个数字。有时为了方便记忆电话号码，我们会将电话号码的数字转变为英文字母，如把263-7422记成America。有时，我们还加上“-”作为分隔符，如把449-6753记成Hi-World。当然，我们未必要将所有的数字都转变为字母，比如474-6635可以记成iPhone-5。
总之，一个方便记忆的电话号码由数字和除Q、Z外的英文字母组成，并且可以在任意位置插入任意多的“-”符号。
现在 ，我们有一个列表，记录着许多方便记忆的电话号码。不同的方便记忆的电话号码可能对应相同的标准号码，你的任务就是找出它们。

【输入】
第一行是一个正整数n（n <= 100000），表示列表中的电话号码数。
其后n行，每行是一个方便记忆的电话号码，它由数字和除Q、Z外的英文字母、“-”符号组成，其中数字和字母的总数一定为7，字符串总长度不超过200。
【输出】
输出包括若干行，每行包括一个标准电话号码（xxx-xxxx）以及它重复出现的次数k（k >= 2），中间用空格分隔。输出的标准电话号码需按照升序排序。
如果没有重复出现的标准电话号码，则输出一行“No duplicates.”。
【样例输入】
12
4873279
ITS-EASY
888-4567
3-10-10-10
888-GLOP
TUT-GLOP
967-11-11
310-GINO
F101010
888-1200
-4-8-7-3-2-7-9-
487-3279
【样例输出】
310-1010 2
487-3279 4
888-4567 3 

【题解】
书上方法大概是用一个二维数组储存，然后再计算，再排序。
其实可以直接开一个大数组a，a的下标为电话号码，a[i]表示号码出现的次数。这样既避免了去重，又不用排序，貌似还不会TLE。
注意输出前导0（iomanip可以实现）。
比书上代码短20行左右。

【代码】
#include<iostream>
#include<iomanip>
#include<stdlib.h>
#include<string.h>
using namespace std;

const int maxn = 10000000+100;
int n;
char map[]="22233344455566677778889999";
int a[maxn];

void init(){
	for(int i=0;i<=10000000;i++) a[i]=0;
}

int pow2(int a){
	if(a==0) return 1;
	int t=1;
	for(int i=1;i<=a;i++) t*=10;
	return t;
}

void solve(){
	char s[100],t;
	int i=1,num=0;
	while(i<=7) {
		cin>>t;
		if(t!='-'){
			s[i]=t;
			i++;
		}
	}
	for(int i=1;i<=7;i++) {
		int j=pow2(7-i);
		if(s[i]>='0'&&s[i]<='9') num+=j*(s[i]-'0');	
		else num+=j*(map[s[i]-'A']-'0'); //注意要把字符映射回数字
	}
	a[num]++;
}

int main(){
	cin>>n;
	init();
	for(int i=1;i<=n;i++) solve();	
	bool res=false;
	for(int i=0;i<=10000000;i++) if(a[i]>1) res=true,cout<<setfill('0')<<setw(3)<<i/10000<<'-'<<setfill('0')<<setw(4)<<i%10000<<' '<<a[i]<<endl; 
	if(!res) cout<<"No duplicates."<<endl;
	return 0;
}
