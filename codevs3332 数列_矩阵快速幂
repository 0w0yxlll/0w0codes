# 0w0codes
【题目描述】
a[1]=a[2]=a[3]=1
a[x]=a[x-3]+a[x-1]  (x>3)
求a数列的第n项对1000000007（10^9+7）取余的值。

【输入描述】
第一行一个整数T，表示询问个数。
以下T行，每行一个正整数n。

【输出描述】 
每行输出一个非负整数表示答案

【样例输入】
3
6
8
10

【样例输出】
4
9
19

【数据范围及提示】
对于30%的数据 n<=100；
对于60%的数据 n<=2*10^7；
对于100%的数据 T<=100，n<=2*10^9；

【题解】
矩阵快速幂。
做的时候只是在前面卡了一下而已（后来加几个特判就ok了），总的来说推矩阵还是比较简单的。
直接把Fibonacci数列的初始化改一下就可以了。

【代码】
#include<iostream>
#include<stdlib.h>
using namespace std;
#define maxn 50
#define ele long long
struct mat{
	ele n,m,a[maxn][maxn];
};
mat operator*(mat a,mat b){
	mat c;
	c.n=a.n;c.m=b.m;
	for(int i=0;i<c.n;i++)
		for(int j=0;j<c.m;j++){
			c.a[i][j]=0;
			for(int k=0;k<a.m;k++)
				c.a[i][j]+=a.a[i][k]*b.a[k][j]%1000000007;
		}
	return c;
}
mat operator^(mat b,ele x){
	if(x==0){
		for(int i=0;i<b.n;i++)
			for(int j=0;j<b.m;j++)
				b.a[i][j]=(i==j);
		return b;
	}
	mat k=b^(x/2);
	k=k*k;
	if(x&1) k=k*b;
	return k;
}
int main(){
	ele t;
	cin>>t;
	while (t--){
		mat a,b,c;
		ele w;
		cin>>w;
		if(w==1||w==2||w==3) {
            cout<<"1"<<endl;
            continue;
        }
        w-=3;
		a=(mat){3,1,{{1},{1},{2}}};
		b=(mat){3,3,{{0,1,0},{0,0,1},{1,0,1}}};
		b=b^w;
		c=b*a;
		cout<<c.a[1][0]%1000000007<<endl;
	}
	system("pause");
	return 0;
}
