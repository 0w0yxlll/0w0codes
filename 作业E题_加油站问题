# 0w0codes

[description]
一辆汽车加满油后可行驶n公里。旅途中有若干个加油站。设计一个有效算法，指出应在哪些加油站停靠加油，使沿途加油次数最少。
并证明算法能产生一个最优解。
对于给定的n和k个加油站位置，计算最少加油次数。
[input]
本题有多组输入数据，直到EOF结束。 
对于每组输入数据的第一行有2 个正整数n和k（n≤5000，k≤1000），表示汽车加满油后可行驶n公里，且旅途中有k个加油站。
接下来的1 行中，有k+1 个整数，表示第k个加油站与第k-1 个加油站之间的距离。第0 个加油站表示出发地，汽车已加满油。
第k+1 个加油站表示目的地。
[output]
将计算出的最少加油次数输出。如果无法到达目的地，则输出“No Solution!”。 

[题解]
能走就走。
判断可行的方法：看是有没有一项比油箱容量多。
这个可以证。
[代码]
#include<iostream>
using namespace std;

int n,k,cnt,t;
bool flg;

void solve(){
	int a[1000+20];
	flg=false;
	for(int i=0;i<=k;i++) {
		cin>>a[i];	
		if(a[i]>n) { flg=true;}
	}
	if(flg==false){
	cnt=0;t=n;
	for(int i=1;i<=k;i++) {
	t-=a[i-1];
	//cout<<"a[i]="<<a[i]<<" i="<<i<<" t="<<t;
		if(t<a[i]){
			cnt++;
			t=n;
		//	cout<<" add";
		}
		//cout<<endl;
	}
	}
	if(flg) cout<<"No Solution!";
	else cout<<cnt;
	cout<<endl;
}

int main()
{
	while(cin>>n>>k) solve();	
	return 0;
} 

[超时的dp]
设f[x,y]代表在第i个城市，油还可以走j公里，至少还要加多少油才能到终点。
f[k+1,y]=0;
转移的时候考虑两种情况：
不加油：f[i+1,j-d[i]]
	d[i]是i到 下一个 城市的距离。
加油：f[i+1,n-d[i]]+1
	
